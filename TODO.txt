TODO Current:
 - Chunking / Room / Level (ie. underground/upstairs) system
    - Buildings should be as large on the outside as they are in.
    - When behind a building it should fade out
    - When in a building the roof and some walls should become transparent

TODO Next:
 - Create first pass at entity factory system.
 - Make camera an entity, refactor tweening to tween any entity towards another. Remove prev position from inside camera



TODO infrastructure:
 - Spike out initial game mechanics
    - Heisting
    - Base building
    - Large amount of npcs
 - First pass at particle system.
 - First pass at lighting system.
 - Level editing + persistence
 - Implement game state persistence
    - Store tiles


Graphics Engine design
    Current approach / usage:
     - Interpolated rendering for between game ticks
     - Static rendering for tiles + game objects
     - Static rendering for Gui

    New Approach 1:
     - All rendering goes through interpolated rendering system:
        - Add support for non sprites.
        - Tile maps use same sprite registry as entity sprites.
        - Tile maps render through interpolated system.
        - Interpolated system interpolates camera position for each frame.

     - Benefits:
        - Will easily be able to introduce z ordering.
        - Will be able to change rendering techniques fairly easily.

     - Can split up down the road for performance reasons if required.



Mechanics:
    Development Types
        Engineering
        Science

    Development Action
        Automatable
        Requires players to actively solve problems to improve trajectory of Development

    Developed Tech has to be stored as 'Trade Secrets'
        In chest on paper
        On flash drive
        On servers

    Trade secret stealing
    Building + town development
    Robbery + policing




NPC AI
 - Has a set of values etc.
    - Money (0.3)
    - Food (0.3)
    - Kindness (0.4)
    - Craftsmanship (0.5)
    - Fun (0.3)

 - Values shape their goals
    - Create farm / increase size of farm.
    - Decides on a goal that can increase fulfilment of values
    - Decisions are based upon theories

 - Theories
    - Small farm will make enough food
    - Large farm will make lots of money
    - Medium farm will cost too much money

 - GOALS
    - New goals
    - Make a plan
    - Begin executing actions to get closer to the goal

    EX: Build a fence
        - Decide size + location
            - based on owned land ? (How much should be fenced off)
            - based on currency ? (How much resources will be needed)
            - based on resources (How much resources does he have)
        - Steps to build
            - buy wood ?
            - walk to woodpile
            - pick up wood ?
            - walk to fence section
            - build section
            - itemPickup wood




Example NPC progression
 - Decide to do something randomly
    - Create farm
 - Creates farm
 - Money starts to go up
 - Associate increase in farming with increase in money
 - Expand farm
 - Money goes up
 - Npc now knows that bigger farm = less money
 - Npc decides to not fertilize farm
 - Crop yields less, money goes down
 - Npc knows that not fertilizing = less money



Things to do:
    Mine
        - prospecting mechanic
        - strip mines take up large areas of land,
        - underground mines possible for some resources.
    Farming
    Engineering
        - Factorio style mechanics
        - Small scale engineering allows players to customize + optimize blocks by developing a technology.